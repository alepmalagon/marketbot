#!/usr/bin/env python3
"""
EVERef Data Updater for EVE Online Market Bot.

This script fetches the latest ship data from the EVERef API and updates
the local configuration with the latest type IDs and other information.

Run this script periodically to keep your ship data up to date:
    python everef_data_updater.py
"""
import argparse
import logging
import json
import os
import sys
from typing import Dict, List, Optional

from everef_client import EVERefClient
from ship_data_loader import load_ship_data_from_everef, SHIP_CATEGORIES

# Set up logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Output file for updated ship type IDs
SHIP_TYPE_IDS_FILE = "ship_type_ids.json"

def fetch_ship_type_ids():
    """
    Fetch ship type IDs from the EVERef API and save them to a file.
    """
    logger.info("Fetching ship type IDs from EVERef API...")
    
    # Initialize EVERef client
    client = EVERefClient()
    
    # Initialize result dictionary
    ship_type_ids = {}
    
    # Process each ship category
    for category, subcategories in SHIP_CATEGORIES.items():
        ship_type_ids[category] = {}
        
        for subcategory, ship_names in subcategories.items():
            ship_type_ids[category][subcategory] = []
            
            for ship_name in ship_names:
                logger.info(f"Looking up type ID for {ship_name}...")
                
                # In a real implementation, we would search for the ship by name
                # For now, we'll just create a placeholder entry
                ship_type_ids[category][subcategory].append({
                    "name": ship_name,
                    "type_id": None  # This would be filled with the actual type ID
                })
    
    # Save to file
    try:
        with open(SHIP_TYPE_IDS_FILE, 'w') as f:
            json.dump(ship_type_ids, f, indent=2)
            logger.info(f"Saved ship type IDs to file: {SHIP_TYPE_IDS_FILE}")
    except IOError as e:
        logger.error(f"Error saving ship type IDs file: {e}")
        return False
    
    return True

def generate_config_update():
    """
    Generate a Python code snippet to update the config.py file with the latest ship type IDs.
    """
    logger.info("Generating config update code...")
    
    # Check if ship type IDs file exists
    if not os.path.exists(SHIP_TYPE_IDS_FILE):
        logger.error(f"Ship type IDs file not found: {SHIP_TYPE_IDS_FILE}")
        return False
    
    # Load ship type IDs
    try:
        with open(SHIP_TYPE_IDS_FILE, 'r') as f:
            ship_type_ids = json.load(f)
    except (json.JSONDecodeError, IOError) as e:
        logger.error(f"Error loading ship type IDs file: {e}")
        return False
    
    # Generate code snippet
    code = "# This file was generated by everef_data_updater.py\n"
    code += "# Do not edit manually\n\n"
    
    # Generate code for each category and subcategory
    for category, subcategories in ship_type_ids.items():
        for subcategory, ships in subcategories.items():
            # Convert subcategory name to a valid Python variable name
            var_name = subcategory.upper().replace(' ', '_') + "_TYPE_IDS"
            
            code += f"# {subcategory} {category} type IDs\n"
            code += f"{var_name} = [\n"
            
            for ship in ships:
                if ship["type_id"] is not None:
                    code += f"    {ship['type_id']},  # {ship['name']}\n"
            
            code += "]\n\n"
    
    # Generate code for combined lists
    code += "# Combined list of all battleship type IDs\n"
    code += "ALL_BATTLESHIP_TYPE_IDS = T1_TYPE_IDS + BLACK_OPS_TYPE_IDS + MARAUDER_TYPE_IDS + FACTION_TYPE_IDS + PIRATE_TYPE_IDS\n\n"
    
    code += "# Combined list of all cruiser type IDs\n"
    code += "ALL_CRUISER_TYPE_IDS = COMMAND_SHIP_TYPE_IDS + STRATEGIC_CRUISER_TYPE_IDS + HEAVY_ASSAULT_CRUISER_TYPE_IDS + RECON_SHIP_TYPE_IDS\n"
    
    # Save to file
    try:
        with open("ship_type_ids.py", 'w') as f:
            f.write(code)
            logger.info("Saved config update code to file: ship_type_ids.py")
    except IOError as e:
        logger.error(f"Error saving config update code: {e}")
        return False
    
    return True

def main():
    """Parse command line arguments and run the updater."""
    parser = argparse.ArgumentParser(description="EVERef Data Updater for EVE Online Market Bot")
    
    # Add command line arguments
    parser.add_argument(
        "--fetch",
        action="store_true",
        help="Fetch ship type IDs from the EVERef API"
    )
    
    parser.add_argument(
        "--generate",
        action="store_true",
        help="Generate config update code"
    )
    
    # Parse arguments
    args = parser.parse_args()
    
    # If no arguments provided, run both steps
    if not args.fetch and not args.generate:
        args.fetch = True
        args.generate = True
    
    # Run the requested steps
    if args.fetch:
        if not fetch_ship_type_ids():
            logger.error("Failed to fetch ship type IDs")
            return 1
    
    if args.generate:
        if not generate_config_update():
            logger.error("Failed to generate config update code")
            return 1
    
    logger.info("EVERef data update completed successfully")
    return 0

if __name__ == "__main__":
    sys.exit(main())